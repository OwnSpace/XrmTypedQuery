//------------------------------------------------------------------------------
//    This code was generated by a tool.
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;

[assembly: ProxyTypesAssembly]
namespace Xrm.TypedQuery.Tests
{
    public class Lead : Entity
    {
        public Lead()
            : base(EntityLogicalName)
        {
        }

        public const string EntityLogicalName = "lead";

        /// <summary>
        /// Интерес
        /// </summary>
        /// <remarks>
        /// Уникальный идентификатор Интереса.
        /// </remarks>
        [AttributeLogicalName("leadid")]
        public Guid? LeadId
        {
            get => GetAttributeValue<Guid?>("leadid");
            set
            {
                SetAttributeValue("leadid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        public override Guid Id
        {
            get => base.Id;
            set => LeadId = value;
        }
    }

    [DataContract]
    public enum AccountState
    {
        [EnumMember]
        Active = 0,

        [EnumMember]
        Inactive = 1
    }

    [DataContract]
    public enum AccountStatus
    {
        [EnumMember]
        Active_Active = 1,

        [EnumMember]
        Inactive_Inactive = 2
    }

    /// <summary>
    /// Организация
    /// </summary>
    /// <remarks>
    /// Компания, представляющая существующего или потенциального клиента. Компания, которой выставляется счет в деловых транзакциях.
    /// </remarks>
    [DataContract]
    [EntityLogicalName("account")]
    [GeneratedCode("pkGenUtil", "0.0")]
    public class Account : Entity
    {
        public Account()
            : base(EntityLogicalName)
        {
        }

        public const string EntityLogicalName = "account";

        /// <summary>
        /// Организация
        /// </summary>
        /// <remarks>
        /// Уникальный идентификатор организации.
        /// </remarks>
        [AttributeLogicalName("accountid")]
        public Guid? AccountId
        {
            get => GetAttributeValue<Guid?>("accountid");
            set
            {
                SetAttributeValue("accountid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        public override Guid Id
        {
            get => base.Id;
            set => AccountId = value;
        }

        /// <summary>
        /// Стадия процесса
        /// </summary>
        /// <remarks>
        /// Показывает идентификатор стадии.
        /// </remarks>
        [AttributeLogicalName("stageid")]
        public Guid? StageId
        {
            get => GetAttributeValue<Guid?>("stageid");
            set => SetAttributeValue("stageid", value);
        }

        /// <summary>
        /// Адрес 2: идентификатор
        /// </summary>
        /// <remarks>
        /// Уникальный идентификатор для адреса 2.
        /// </remarks>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId
        {
            get => GetAttributeValue<Guid?>("address2_addressid");
            set => SetAttributeValue("address2_addressid", value);
        }

        /// <summary>
        /// Процесс
        /// </summary>
        /// <remarks>
        /// Показывает идентификатор процесса.
        /// </remarks>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId
        {
            get => GetAttributeValue<Guid?>("processid");
            set => SetAttributeValue("processid", value);
        }

        /// <summary>
        /// Адрес 1: идентификатор
        /// </summary>
        /// <remarks>
        /// Уникальный идентификатор для адреса 1.
        /// </remarks>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId
        {
            get => GetAttributeValue<Guid?>("address1_addressid");
            set => SetAttributeValue("address1_addressid", value);
        }

        [AttributeLogicalName("statecode")]
        public AccountState? StateCode
        {
            get
            {
                var optionSet = GetAttributeValue<OptionSetValue>("statecode");
                return optionSet == null ? (AccountState?)null : (AccountState)Enum.ToObject(typeof(AccountState), optionSet.Value);
            }
        }

        [AttributeLogicalName("statuscode")]
        public AccountStatus? StatusCode
        {
            get
            {
                var optionSet = GetAttributeValue<OptionSetValue>("statuscode");
                return optionSet == null ? (AccountStatus?)null : (AccountStatus)Enum.ToObject(typeof(AccountStatus), optionSet.Value);
            }
        }

        /// <summary>
        /// Классификация
        /// </summary>
        /// <remarks>
        /// Выберите код классификации, указывающий потенциальную значимость организации клиента исходя из ожидаемых отдачи от вложений, уровня сотрудничества, длительности цикла продаж или других критериев.
        /// </remarks>
        [AttributeLogicalName("accountclassificationcode")]
        public OptionSetValue AccountClassificationCode
        {
            get => GetAttributeValue<OptionSetValue>("accountclassificationcode");
            set => SetAttributeValue("accountclassificationcode", value);
        }

        /// <summary>
        /// Категория
        /// </summary>
        /// <remarks>
        /// Выберите категорию организации клиента: стандартная или привилегированная.
        /// </remarks>
        [AttributeLogicalName("accountcategorycode")]
        public OptionSetValue AccountCategoryCode
        {
            get => GetAttributeValue<OptionSetValue>("accountcategorycode");
            set => SetAttributeValue("accountcategorycode", value);
        }

        /// <summary>
        /// Адрес 2: тип адреса
        /// </summary>
        /// <remarks>
        /// Выберите тип дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_addresstypecode")]
        public OptionSetValue Address2_AddressTypeCode
        {
            get => GetAttributeValue<OptionSetValue>("address2_addresstypecode");
            set => SetAttributeValue("address2_addresstypecode", value);
        }

        /// <summary>
        /// Основное время
        /// </summary>
        /// <remarks>
        /// Выберите предпочтительное время суток для сервисных встреч.
        /// </remarks>
        [AttributeLogicalName("preferredappointmenttimecode")]
        public OptionSetValue PreferredAppointmentTimeCode
        {
            get => GetAttributeValue<OptionSetValue>("preferredappointmenttimecode");
            set => SetAttributeValue("preferredappointmenttimecode", value);
        }

        /// <summary>
        /// Оценка организации
        /// </summary>
        /// <remarks>
        /// Выберите рейтинг, указывающий ценность организации клиента.
        /// </remarks>
        [AttributeLogicalName("accountratingcode")]
        public OptionSetValue AccountRatingCode
        {
            get => GetAttributeValue<OptionSetValue>("accountratingcode");
            set => SetAttributeValue("accountratingcode", value);
        }

        /// <summary>
        /// Основной день
        /// </summary>
        /// <remarks>
        /// Выберите предпочтительный день недели для сервисных встреч.
        /// </remarks>
        [AttributeLogicalName("preferredappointmentdaycode")]
        public OptionSetValue PreferredAppointmentDayCode
        {
            get => GetAttributeValue<OptionSetValue>("preferredappointmentdaycode");
            set => SetAttributeValue("preferredappointmentdaycode", value);
        }

        /// <summary>
        /// Способ доставки
        /// </summary>
        /// <remarks>
        /// Выберите способ доставки для доставок по адресу организации, выбрав предпочитаемую службу доставки или другой вариант доставки.
        /// </remarks>
        [AttributeLogicalName("shippingmethodcode")]
        public OptionSetValue ShippingMethodCode
        {
            get => GetAttributeValue<OptionSetValue>("shippingmethodcode");
            set => SetAttributeValue("shippingmethodcode", value);
        }

        /// <summary>
        /// Адрес 1: способ доставки
        /// </summary>
        /// <remarks>
        /// Выберите метод поставки для доставок по этому адресу.
        /// </remarks>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public OptionSetValue Address1_ShippingMethodCode
        {
            get => GetAttributeValue<OptionSetValue>("address1_shippingmethodcode");
            set => SetAttributeValue("address1_shippingmethodcode", value);
        }

        /// <summary>
        /// Отрасль
        /// </summary>
        /// <remarks>
        /// Выберите основную отрасль организации, которая будет использоваться при маркетинговом сегментировании и демографическом анализе.
        /// </remarks>
        [AttributeLogicalName("industrycode")]
        public OptionSetValue IndustryCode
        {
            get => GetAttributeValue<OptionSetValue>("industrycode");
            set => SetAttributeValue("industrycode", value);
        }

        /// <summary>
        /// Адрес 1: тип адреса
        /// </summary>
        /// <remarks>
        /// Выберите тип основного адреса
        /// </remarks>
        [AttributeLogicalName("address1_addresstypecode")]
        public OptionSetValue Address1_AddressTypeCode
        {
            get => GetAttributeValue<OptionSetValue>("address1_addresstypecode");
            set => SetAttributeValue("address1_addresstypecode", value);
        }

        /// <summary>
        /// Условия оплаты
        /// </summary>
        /// <remarks>
        /// Выберите условия оплаты, чтобы указать, должен ли клиент уплатить всю сумму.
        /// </remarks>
        [AttributeLogicalName("paymenttermscode")]
        public OptionSetValue PaymentTermsCode
        {
            get => GetAttributeValue<OptionSetValue>("paymenttermscode");
            set => SetAttributeValue("paymenttermscode", value);
        }

        /// <summary>
        /// Код территории
        /// </summary>
        /// <remarks>
        /// Выберите область или регион для организации. Они будут использоваться при сегментировании и анализе.
        /// </remarks>
        [AttributeLogicalName("territorycode")]
        public OptionSetValue TerritoryCode
        {
            get => GetAttributeValue<OptionSetValue>("territorycode");
            set => SetAttributeValue("territorycode", value);
        }

        /// <summary>
        /// Адрес 1: условия поставки
        /// </summary>
        /// <remarks>
        /// Выберите условия поставки для основного адреса, чтобы заказы на поставку обрабатывались правильно.
        /// </remarks>
        [AttributeLogicalName("address1_freighttermscode")]
        public OptionSetValue Address1_FreightTermsCode
        {
            get => GetAttributeValue<OptionSetValue>("address1_freighttermscode");
            set => SetAttributeValue("address1_freighttermscode", value);
        }

        /// <summary>
        /// Размер клиента
        /// </summary>
        /// <remarks>
        /// Выберите категорию или диапазон размеров организации в целях сегментирования и отчетности.
        /// </remarks>
        [AttributeLogicalName("customersizecode")]
        public OptionSetValue CustomerSizeCode
        {
            get => GetAttributeValue<OptionSetValue>("customersizecode");
            set => SetAttributeValue("customersizecode", value);
        }

        /// <summary>
        /// Тип отношений
        /// </summary>
        /// <remarks>
        /// Выберите категорию, которая наилучшим образом описывает отношения между данной организацией и вашей организацией.
        /// </remarks>
        [AttributeLogicalName("customertypecode")]
        public OptionSetValue CustomerTypeCode
        {
            get => GetAttributeValue<OptionSetValue>("customertypecode");
            set => SetAttributeValue("customertypecode", value);
        }

        /// <summary>
        /// Предпочтительный способ связи
        /// </summary>
        /// <remarks>
        /// Выберите предпочитаемый способ связи.
        /// </remarks>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public OptionSetValue PreferredContactMethodCode
        {
            get => GetAttributeValue<OptionSetValue>("preferredcontactmethodcode");
            set => SetAttributeValue("preferredcontactmethodcode", value);
        }

        /// <summary>
        /// Тип бизнеса
        /// </summary>
        /// <remarks>
        /// Выберите организационно-правовую форму или другой вид деятельности для данной организации, используемый в целях отчетности или для контрактов.
        /// </remarks>
        [AttributeLogicalName("businesstypecode")]
        public OptionSetValue BusinessTypeCode
        {
            get => GetAttributeValue<OptionSetValue>("businesstypecode");
            set => SetAttributeValue("businesstypecode", value);
        }

        /// <summary>
        /// Тип собственности
        /// </summary>
        /// <remarks>
        /// Введите тип собственности компании - открытый или закрытый.
        /// </remarks>
        [AttributeLogicalName("ownershipcode")]
        public OptionSetValue OwnershipCode
        {
            get => GetAttributeValue<OptionSetValue>("ownershipcode");
            set => SetAttributeValue("ownershipcode", value);
        }

        /// <summary>
        /// Адрес 2: способ поставки
        /// </summary>
        /// <remarks>
        /// Выберите метод поставки для доставок по этому адресу.
        /// </remarks>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public OptionSetValue Address2_ShippingMethodCode
        {
            get => GetAttributeValue<OptionSetValue>("address2_shippingmethodcode");
            set => SetAttributeValue("address2_shippingmethodcode", value);
        }

        /// <summary>
        /// Адрес 2: условия поставки
        /// </summary>
        /// <remarks>
        /// Выберите условия поставки для дополнительного адреса, чтобы заказы на поставку обрабатывались правильно.
        /// </remarks>
        [AttributeLogicalName("address2_freighttermscode")]
        public OptionSetValue Address2_FreightTermsCode
        {
            get => GetAttributeValue<OptionSetValue>("address2_freighttermscode");
            set => SetAttributeValue("address2_freighttermscode", value);
        }

        /// <summary>
        /// Адрес 1: факс
        /// </summary>
        /// <remarks>
        /// Введите номер факса, связанный с основным адресом.
        /// </remarks>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax
        {
            get => GetAttributeValue<string>("address1_fax");
            set => SetAttributeValue("address1_fax", value);
        }

        /// <summary>
        /// Адрес 2: улица, дом (строка 1)
        /// </summary>
        /// <remarks>
        /// Введите первую строку дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1
        {
            get => GetAttributeValue<string>("address2_line1");
            set => SetAttributeValue("address2_line1", value);
        }

        /// <summary>
        /// Адрес 2: почтовый индекс
        /// </summary>
        /// <remarks>
        /// Введите почтовый индекс для дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode
        {
            get => GetAttributeValue<string>("address2_postalcode");
            set => SetAttributeValue("address2_postalcode", value);
        }

        /// <summary>
        /// Адрес 2: телефон 1
        /// </summary>
        /// <remarks>
        /// Введите основной номер телефона, связанный с дополнительным адресом.
        /// </remarks>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1
        {
            get => GetAttributeValue<string>("address2_telephone1");
            set => SetAttributeValue("address2_telephone1", value);
        }

        /// <summary>
        /// Адрес 2: телефон 3
        /// </summary>
        /// <remarks>
        /// Введите третий номер телефона, связанный с дополнительным адресом.
        /// </remarks>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3
        {
            get => GetAttributeValue<string>("address2_telephone3");
            set => SetAttributeValue("address2_telephone3", value);
        }

        /// <summary>
        /// Фондовая биржа
        /// </summary>
        /// <remarks>
        /// Введите фондовую биржу, на которой котируются акции организации, для отслеживания курса акций и финансовых результатов компании.
        /// </remarks>
        [AttributeLogicalName("stockexchange")]
        public string StockExchange
        {
            get => GetAttributeValue<string>("stockexchange");
            set => SetAttributeValue("stockexchange", value);
        }

        /// <summary>
        /// Адрес 2: город
        /// </summary>
        /// <remarks>
        /// Введите город для дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_city")]
        public string Address2_City
        {
            get => GetAttributeValue<string>("address2_city");
            set => SetAttributeValue("address2_city", value);
        }

        /// <summary>
        /// Название организации йоми
        /// </summary>
        /// <remarks>
        /// Введите фонетическое произношение названия компании, если ее название указано на японском языке, для правильного произношения названия при телефонных звонках и других видах общения.
        /// </remarks>
        [AttributeLogicalName("yominame")]
        public string YomiName
        {
            get => GetAttributeValue<string>("yominame");
            set => SetAttributeValue("yominame", value);
        }

        /// <summary>
        /// Адрес 2: имя основного контакта
        /// </summary>
        /// <remarks>
        /// Введите имя основного контакта для дополнительного адреса организации.
        /// </remarks>
        [AttributeLogicalName("address2_primarycontactname")]
        public string Address2_PrimaryContactName
        {
            get => GetAttributeValue<string>("address2_primarycontactname");
            set => SetAttributeValue("address2_primarycontactname", value);
        }

        /// <summary>
        /// Код отрасли
        /// </summary>
        /// <remarks>
        /// Введите код отрасли (SIC), указывающий основную отрасль деятельности организации, для использования при маркетинговом сегментировании и демографическом анализе.
        /// </remarks>
        [AttributeLogicalName("sic")]
        public string SIC
        {
            get => GetAttributeValue<string>("sic");
            set => SetAttributeValue("sic", value);
        }

        /// <summary>
        /// Электронная почта 3
        /// </summary>
        /// <remarks>
        /// Введите альтернативный адрес электронной почты для организации.
        /// </remarks>
        [AttributeLogicalName("emailaddress3")]
        public string EMailAddress3
        {
            get => GetAttributeValue<string>("emailaddress3");
            set => SetAttributeValue("emailaddress3", value);
        }

        /// <summary>
        /// Электронная почта 2
        /// </summary>
        /// <remarks>
        /// Введите дополнительный адрес электронной почты для организации.
        /// </remarks>
        [AttributeLogicalName("emailaddress2")]
        public string EMailAddress2
        {
            get => GetAttributeValue<string>("emailaddress2");
            set => SetAttributeValue("emailaddress2", value);
        }

        /// <summary>
        /// Email организации
        /// </summary>
        /// <remarks>
        /// Введите основной адрес электронной почты для организации.
        /// </remarks>
        [AttributeLogicalName("emailaddress1")]
        public string EMailAddress1
        {
            get => GetAttributeValue<string>("emailaddress1");
            set => SetAttributeValue("emailaddress1", value);
        }

        /// <summary>
        /// Адрес 1: улица, дом (строка 3)
        /// </summary>
        /// <remarks>
        /// Введите третью строку основного адреса.
        /// </remarks>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3
        {
            get => GetAttributeValue<string>("address1_line3");
            set => SetAttributeValue("address1_line3", value);
        }

        /// <summary>
        /// Адрес 1: имя основного контакта
        /// </summary>
        /// <remarks>
        /// Введите имя основного контакта для основного адреса организации.
        /// </remarks>
        [AttributeLogicalName("address1_primarycontactname")]
        public string Address1_PrimaryContactName
        {
            get => GetAttributeValue<string>("address1_primarycontactname");
            set => SetAttributeValue("address1_primarycontactname", value);
        }

        /// <summary>
        /// Адрес 1: округ
        /// </summary>
        /// <remarks>
        /// Введите район для основного адреса.
        /// </remarks>
        [AttributeLogicalName("address1_county")]
        public string Address1_County
        {
            get => GetAttributeValue<string>("address1_county");
            set => SetAttributeValue("address1_county", value);
        }

        /// <summary>
        /// Адрес 1: страна
        /// </summary>
        /// <remarks>
        /// Введите страну или регион для основного адреса.
        /// </remarks>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country
        {
            get => GetAttributeValue<string>("address1_country");
            set => SetAttributeValue("address1_country", value);
        }

        /// <summary>
        /// Адрес 2: зона UPS
        /// </summary>
        /// <remarks>
        /// Введите зону UPS дополнительного адреса, чтобы доставка с помощью службы UPS осуществлялась быстро, а расходы на доставку рассчитывались правильно.
        /// </remarks>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone
        {
            get => GetAttributeValue<string>("address2_upszone");
            set => SetAttributeValue("address2_upszone", value);
        }

        /// <summary>
        /// Название организации
        /// </summary>
        /// <remarks>
        /// Введите наименование компании или предприятия.
        /// </remarks>
        [AttributeLogicalName("name")]
        public string Name
        {
            get => GetAttributeValue<string>("name");
            set => SetAttributeValue("name", value);
        }

        /// <summary>
        /// Адрес 1: улица, дом (строка 1)
        /// </summary>
        /// <remarks>
        /// Введите первую строку основного адреса.
        /// </remarks>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1
        {
            get => GetAttributeValue<string>("address1_line1");
            set => SetAttributeValue("address1_line1", value);
        }

        /// <summary>
        /// Адрес 2: улица, дом (строка 2)
        /// </summary>
        /// <remarks>
        /// Введите вторую строку дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2
        {
            get => GetAttributeValue<string>("address2_line2");
            set => SetAttributeValue("address2_line2", value);
        }

        /// <summary>
        /// Адрес 1: город
        /// </summary>
        /// <remarks>
        /// Введите город для основного адреса.
        /// </remarks>
        [AttributeLogicalName("address1_city")]
        public string Address1_City
        {
            get => GetAttributeValue<string>("address1_city");
            set => SetAttributeValue("address1_city", value);
        }

        /// <summary>
        /// Другой телефон
        /// </summary>
        /// <remarks>
        /// Введите второй номер телефона для этой организации.
        /// </remarks>
        [AttributeLogicalName("telephone2")]
        public string Telephone2
        {
            get => GetAttributeValue<string>("telephone2");
            set => SetAttributeValue("telephone2", value);
        }

        /// <summary>
        /// Адрес 2: название
        /// </summary>
        /// <remarks>
        /// Введите информативное имя для дополнительного адреса (например, 'Штаб-квартира корпорации').
        /// </remarks>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name
        {
            get => GetAttributeValue<string>("address2_name");
            set => SetAttributeValue("address2_name", value);
        }

        /// <summary>
        /// Адрес 2: страна
        /// </summary>
        /// <remarks>
        /// Введите страну или регион для дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country
        {
            get => GetAttributeValue<string>("address2_country");
            set => SetAttributeValue("address2_country", value);
        }

        /// <summary>
        /// Адрес 1: название
        /// </summary>
        /// <remarks>
        /// Введите информативное имя для основного адреса (например, 'Штаб-квартира корпорации').
        /// </remarks>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name
        {
            get => GetAttributeValue<string>("address1_name");
            set => SetAttributeValue("address1_name", value);
        }

        /// <summary>
        /// Веб-сайт
        /// </summary>
        /// <remarks>
        /// Введите URL-адрес веб-сайта организации для быстрого получения сведений о профиле компании.
        /// </remarks>
        [AttributeLogicalName("websiteurl")]
        public string WebSiteURL
        {
            get => GetAttributeValue<string>("websiteurl");
            set => SetAttributeValue("websiteurl", value);
        }

        /// <summary>
        /// Телефон
        /// </summary>
        /// <remarks>
        /// Введите основной номер телефона, связанный с основным адресом.
        /// </remarks>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1
        {
            get => GetAttributeValue<string>("address1_telephone1");
            set => SetAttributeValue("address1_telephone1", value);
        }

        /// <summary>
        /// Адрес 1: телефон 2
        /// </summary>
        /// <remarks>
        /// Введите второй номер телефона, связанный с основным адресом.
        /// </remarks>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2
        {
            get => GetAttributeValue<string>("address1_telephone2");
            set => SetAttributeValue("address1_telephone2", value);
        }

        /// <summary>
        /// Адрес 1: абонентский ящик
        /// </summary>
        /// <remarks>
        /// Введите номер абонентского ящика для основного адреса.
        /// </remarks>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox
        {
            get => GetAttributeValue<string>("address1_postofficebox");
            set => SetAttributeValue("address1_postofficebox", value);
        }

        /// <summary>
        /// Телефон 3
        /// </summary>
        /// <remarks>
        /// Введите третий номер телефона для этой организации.
        /// </remarks>
        [AttributeLogicalName("telephone3")]
        public string Telephone3
        {
            get => GetAttributeValue<string>("telephone3");
            set => SetAttributeValue("telephone3", value);
        }

        /// <summary>
        /// Адрес 1: почтовый индекс
        /// </summary>
        /// <remarks>
        /// Введите почтовый индекс для основного адреса.
        /// </remarks>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode
        {
            get => GetAttributeValue<string>("address1_postalcode");
            set => SetAttributeValue("address1_postalcode", value);
        }

        /// <summary>
        /// Адрес 2: улица, дом (строка 3)
        /// </summary>
        /// <remarks>
        /// Введите третью строку дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3
        {
            get => GetAttributeValue<string>("address2_line3");
            set => SetAttributeValue("address2_line3", value);
        }

        /// <summary>
        /// Адрес 2: телефон 2
        /// </summary>
        /// <remarks>
        /// Введите второй номер телефона, связанный с дополнительным адресом.
        /// </remarks>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2
        {
            get => GetAttributeValue<string>("address2_telephone2");
            set => SetAttributeValue("address2_telephone2", value);
        }

        /// <summary>
        /// Адрес 2: область, край, республика
        /// </summary>
        /// <remarks>
        /// Введите область или республику для дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince
        {
            get => GetAttributeValue<string>("address2_stateorprovince");
            set => SetAttributeValue("address2_stateorprovince", value);
        }

        /// <summary>
        /// Адрес 2: округ
        /// </summary>
        /// <remarks>
        /// Введите район для дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_county")]
        public string Address2_County
        {
            get => GetAttributeValue<string>("address2_county");
            set => SetAttributeValue("address2_county", value);
        }

        /// <summary>
        /// Основной телефон
        /// </summary>
        /// <remarks>
        /// Введите основной номер телефона для этой организации.
        /// </remarks>
        [AttributeLogicalName("telephone1")]
        public string Telephone1
        {
            get => GetAttributeValue<string>("telephone1");
            set => SetAttributeValue("telephone1", value);
        }

        /// <summary>
        /// Факс
        /// </summary>
        /// <remarks>
        /// Введите номер факса для организации.
        /// </remarks>
        [AttributeLogicalName("fax")]
        public string Fax
        {
            get => GetAttributeValue<string>("fax");
            set => SetAttributeValue("fax", value);
        }

        /// <summary>
        /// Адрес 1: область, край, республика
        /// </summary>
        /// <remarks>
        /// Введите область или республику для основного адреса.
        /// </remarks>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince
        {
            get => GetAttributeValue<string>("address1_stateorprovince");
            set => SetAttributeValue("address1_stateorprovince", value);
        }

        /// <summary>
        /// Адрес 2: факс
        /// </summary>
        /// <remarks>
        /// Введите номер факса, связанный с дополнительным адресом.
        /// </remarks>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax
        {
            get => GetAttributeValue<string>("address2_fax");
            set => SetAttributeValue("address2_fax", value);
        }

        /// <summary>
        /// Описание
        /// </summary>
        /// <remarks>
        /// Введите дополнительные сведения, описывающие организацию, например отрывок из описания на веб-сайте компании.
        /// </remarks>
        [AttributeLogicalName("description")]
        public string Description
        {
            get => GetAttributeValue<string>("description");
            set => SetAttributeValue("description", value);
        }

        /// <summary>
        /// Код организации
        /// </summary>
        /// <remarks>
        /// Введите идентификационный номер или код счета для быстрого поиска организации в системных представлениях.
        /// </remarks>
        [AttributeLogicalName("accountnumber")]
        public string AccountNumber
        {
            get => GetAttributeValue<string>("accountnumber");
            set => SetAttributeValue("accountnumber", value);
        }

        /// <summary>
        /// FTP-сайт
        /// </summary>
        /// <remarks>
        /// Введите URL-адрес для FTP-сайта организации, чтобы пользователи получили доступ к данным и могли обмениваться документами.
        /// </remarks>
        [AttributeLogicalName("ftpsiteurl")]
        public string FtpSiteURL
        {
            get => GetAttributeValue<string>("ftpsiteurl");
            set => SetAttributeValue("ftpsiteurl", value);
        }

        /// <summary>
        /// Пройденный путь
        /// </summary>
        /// <remarks>
        /// Разделенный запятыми список строковых значений, представляющих уникальные идентификаторы стадий в экземпляре последовательности операций бизнес-процесса в порядке, в котором они происходят.
        /// </remarks>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath
        {
            get => GetAttributeValue<string>("traversedpath");
            set => SetAttributeValue("traversedpath", value);
        }

        /// <summary>
        /// Адрес 2: абонентский ящик
        /// </summary>
        /// <remarks>
        /// Введите номер абонентского ящика для дополнительного адреса.
        /// </remarks>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox
        {
            get => GetAttributeValue<string>("address2_postofficebox");
            set => SetAttributeValue("address2_postofficebox", value);
        }

        /// <summary>
        /// Адрес 1: телефон 3
        /// </summary>
        /// <remarks>
        /// Введите третий номер телефона, связанный с основным адресом.
        /// </remarks>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3
        {
            get => GetAttributeValue<string>("address1_telephone3");
            set => SetAttributeValue("address1_telephone3", value);
        }

        /// <summary>
        /// Адрес 1: зона UPS
        /// </summary>
        /// <remarks>
        /// Введите зону UPS основного адреса, чтобы доставка с помощью службы UPS осуществлялась быстро, а расходы на доставку рассчитывались правильно.
        /// </remarks>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone
        {
            get => GetAttributeValue<string>("address1_upszone");
            set => SetAttributeValue("address1_upszone", value);
        }

        /// <summary>
        /// Тикер
        /// </summary>
        /// <remarks>
        /// Введите обозначение (тикер) организации на фондовой бирже для отслеживания финансовых результатов компании. Щелкнув введенный в этом поле код, вы сможете просмотреть новейшую биржевую информацию на MSN Money.
        /// </remarks>
        [AttributeLogicalName("tickersymbol")]
        public string TickerSymbol
        {
            get => GetAttributeValue<string>("tickersymbol");
            set => SetAttributeValue("tickersymbol", value);
        }

        /// <summary>
        /// Адрес 1: улица, дом (строка 2)
        /// </summary>
        /// <remarks>
        /// Введите вторую строку основного адреса.
        /// </remarks>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2
        {
            get => GetAttributeValue<string>("address1_line2");
            set => SetAttributeValue("address1_line2", value);
        }

        /// <summary>
        /// Адрес 2
        /// </summary>
        /// <remarks>
        /// Показывает полный дополнительный адрес.
        /// </remarks>
        [AttributeLogicalName("address2_composite")]
        public string Address2_Composite => GetAttributeValue<string>("address2_composite");

        [AttributeLogicalName("modifiedbyyominame")]
        public string ModifiedByYomiName => GetAttributeValue<string>("modifiedbyyominame");

        [AttributeLogicalName("preferredserviceidname")]
        public string PreferredServiceIdName => GetAttributeValue<string>("preferredserviceidname");

        [AttributeLogicalName("createdbyyominame")]
        public string CreatedByYomiName => GetAttributeValue<string>("createdbyyominame");

        [AttributeLogicalName("owneridyominame")]
        public string OwnerIdYomiName => GetAttributeValue<string>("owneridyominame");

        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName => GetAttributeValue<string>("transactioncurrencyidname");

        [AttributeLogicalName("masteraccountidname")]
        public string MasterAccountIdName => GetAttributeValue<string>("masteraccountidname");

        [AttributeLogicalName("parentaccountidname")]
        public string ParentAccountIdName => GetAttributeValue<string>("parentaccountidname");

        [AttributeLogicalName("preferredsystemuseridyominame")]
        public string PreferredSystemUserIdYomiName => GetAttributeValue<string>("preferredsystemuseridyominame");

        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName => GetAttributeValue<string>("createdonbehalfbyname");

        [AttributeLogicalName("masteraccountidyominame")]
        public string MasterAccountIdYomiName => GetAttributeValue<string>("masteraccountidyominame");

        [AttributeLogicalName("primarycontactidname")]
        public string PrimaryContactIdName => GetAttributeValue<string>("primarycontactidname");

        [AttributeLogicalName("preferredsystemuseridname")]
        public string PreferredSystemUserIdName => GetAttributeValue<string>("preferredsystemuseridname");

        [AttributeLogicalName("owneridname")]
        public string OwnerIdName => GetAttributeValue<string>("owneridname");

        [AttributeLogicalName("originatingleadidname")]
        public string OriginatingLeadIdName => GetAttributeValue<string>("originatingleadidname");

        [AttributeLogicalName("parentaccountidyominame")]
        public string ParentAccountIdYomiName => GetAttributeValue<string>("parentaccountidyominame");

        [AttributeLogicalName("preferredequipmentidname")]
        public string PreferredEquipmentIdName => GetAttributeValue<string>("preferredequipmentidname");

        /// <summary>
        /// Адрес 1
        /// </summary>
        /// <remarks>
        /// Показывает полный основной адрес.
        /// </remarks>
        [AttributeLogicalName("address1_composite")]
        public string Address1_Composite => GetAttributeValue<string>("address1_composite");

        [AttributeLogicalName("originatingleadidyominame")]
        public string OriginatingLeadIdYomiName => GetAttributeValue<string>("originatingleadidyominame");

        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL => GetAttributeValue<string>("entityimage_url");

        [AttributeLogicalName("createdbyname")]
        public string CreatedByName => GetAttributeValue<string>("createdbyname");

        [AttributeLogicalName("defaultpricelevelidname")]
        public string DefaultPriceLevelIdName => GetAttributeValue<string>("defaultpricelevelidname");

        [AttributeLogicalName("primarycontactidyominame")]
        public string PrimaryContactIdYomiName => GetAttributeValue<string>("primarycontactidyominame");

        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName => GetAttributeValue<string>("modifiedbyname");

        [AttributeLogicalName("createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName => GetAttributeValue<string>("createdonbehalfbyyominame");

        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName => GetAttributeValue<string>("modifiedonbehalfbyyominame");

        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName => GetAttributeValue<string>("modifiedonbehalfbyname");

        [AttributeLogicalName("territoryidname")]
        public string TerritoryIdName => GetAttributeValue<string>("territoryidname");

        /// <summary>
        /// Территория
        /// </summary>
        /// <remarks>
        /// Выберите для организации область или регион продаж, чтобы гарантировать назначение организации правильному представителю. Эти данные также используются при сегментации и анализе.
        /// </remarks>
        [AttributeLogicalName("territoryid")]
        public EntityReference TerritoryId
        {
            get => GetAttributeValue<EntityReference>("territoryid");
            set => SetAttributeValue("territoryid", value);
        }

        /// <summary>
        /// Основной пользователь
        /// </summary>
        /// <remarks>
        /// Выберите предпочтительного представителя отдела обслуживания. Используется в справочных целях при планировании действий сервиса для организации.
        /// </remarks>
        [AttributeLogicalName("preferredsystemuserid")]
        public EntityReference PreferredSystemUserId
        {
            get => GetAttributeValue<EntityReference>("preferredsystemuserid");
            set => SetAttributeValue("preferredsystemuserid", value);
        }

        /// <summary>
        /// Ответственный
        /// </summary>
        /// <remarks>
        /// Введите пользователя или рабочую группу, которым назначено управление записью. Это поле обновляется при каждом назначении записи другому пользователю.
        /// </remarks>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId
        {
            get => GetAttributeValue<EntityReference>("ownerid");
            set => SetAttributeValue("ownerid", value);
        }

        /// <summary>
        /// Родительская организация
        /// </summary>
        /// <remarks>
        /// Родительская организация
        /// </remarks>
        [AttributeLogicalName("parentaccountid")]
        public EntityReference ParentAccountId
        {
            get => GetAttributeValue<EntityReference>("parentaccountid");
            set => SetAttributeValue("parentaccountid", value);
        }

        /// <summary>
        /// Валюта
        /// </summary>
        /// <remarks>
        /// Выберите для записи локальную валюту, чтобы отчеты по бюджетам формировались в правильной валюте.
        /// </remarks>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId
        {
            get => GetAttributeValue<EntityReference>("transactioncurrencyid");
            set => SetAttributeValue("transactioncurrencyid", value);
        }

        /// <summary>
        /// Прайс-лист
        /// </summary>
        /// <remarks>
        /// Выберите прайс-лист по умолчанию, связанный с организацией, чтобы в возможных сделках, предложениях с расценками и заказах для этого клиента использовались правильные цены на продукты.
        /// </remarks>
        [AttributeLogicalName("defaultpricelevelid")]
        public EntityReference DefaultPriceLevelId
        {
            get => GetAttributeValue<EntityReference>("defaultpricelevelid");
            set => SetAttributeValue("defaultpricelevelid", value);
        }

        /// <summary>
        /// Источник интереса
        /// </summary>
        /// <remarks>
        /// Показывает интерес, из которого была создана организация, если она создана посредством преобразования интереса в Microsoft Dynamics CRM. Эта информация используется для связи организации с данными по исходному интересу при формировании отчетов и в аналитике.
        /// </remarks>
        [AttributeLogicalName("originatingleadid")]
        public EntityReference OriginatingLeadId
        {
            get => GetAttributeValue<EntityReference>("originatingleadid");
            set => SetAttributeValue("originatingleadid", value);
        }

        /// <summary>
        /// Основной сервис
        /// </summary>
        /// <remarks>
        /// Выберите предпочитаемый вариант обслуживания для организации. Используется в справочных целях при планировании действий сервиса.
        /// </remarks>
        [AttributeLogicalName("preferredserviceid")]
        public EntityReference PreferredServiceId
        {
            get => GetAttributeValue<EntityReference>("preferredserviceid");
            set => SetAttributeValue("preferredserviceid", value);
        }

        /// <summary>
        /// Основное оборудование
        /// </summary>
        /// <remarks>
        /// Выберите предпочитаемые помещение обслуживания или оборудование для организации, чтобы гарантировать правильное планирование сервиса для клиента.
        /// </remarks>
        [AttributeLogicalName("preferredequipmentid")]
        public EntityReference PreferredEquipmentId
        {
            get => GetAttributeValue<EntityReference>("preferredequipmentid");
            set => SetAttributeValue("preferredequipmentid", value);
        }

        /// <summary>
        /// Основной контакт
        /// </summary>
        /// <remarks>
        /// Выберите основной контакт для организации, используемый для быстрого доступа к данным контакта.
        /// </remarks>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference PrimaryContactId
        {
            get => GetAttributeValue<EntityReference>("primarycontactid");
            set => SetAttributeValue("primarycontactid", value);
        }

        /// <summary>
        /// Ответственный пользователь
        /// </summary>
        /// <remarks>
        /// Уникальный идентификатор пользователя, ответственного за организацию.
        /// </remarks>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser => GetAttributeValue<EntityReference>("owninguser");

        /// <summary>
        /// Основной идентификатор
        /// </summary>
        /// <remarks>
        /// Указывает главную организацию, с которой была объединена эта организация.
        /// </remarks>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId => GetAttributeValue<EntityReference>("masterid");

        /// <summary>
        /// Создано
        /// </summary>
        /// <remarks>
        /// Показывает, кто создал запись.
        /// </remarks>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy => GetAttributeValue<EntityReference>("createdby");

        /// <summary>
        /// Кем изменено (делегат)
        /// </summary>
        /// <remarks>
        /// Показывает, кто создал запись от имени другого пользователя.
        /// </remarks>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy => GetAttributeValue<EntityReference>("modifiedonbehalfby");

        /// <summary>
        /// Ответственное подразделение
        /// </summary>
        /// <remarks>
        /// Указывает подразделение, к которому принадлежит владелец записи.
        /// </remarks>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit => GetAttributeValue<EntityReference>("owningbusinessunit");

        /// <summary>
        /// Ответственная рабочая группа
        /// </summary>
        /// <remarks>
        /// Уникальный идентификатор рабочей группы, ответственной за организацию.
        /// </remarks>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam => GetAttributeValue<EntityReference>("owningteam");

        /// <summary>
        /// Кем создано (делегат)
        /// </summary>
        /// <remarks>
        /// Показывает, кто создал запись от имени другого пользователя.
        /// </remarks>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy => GetAttributeValue<EntityReference>("createdonbehalfby");

        /// <summary>
        /// Изменено
        /// </summary>
        /// <remarks>
        /// Показывает, кто последний обновил запись.
        /// </remarks>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy => GetAttributeValue<EntityReference>("modifiedby");

        /// <summary>
        /// Годовой доход
        /// </summary>
        /// <remarks>
        /// Введите годовой доход компании, используемый в качестве индикатора при анализе финансовых результатов.
        /// </remarks>
        [AttributeLogicalName("revenue")]
        public Money Revenue
        {
            get => GetAttributeValue<Money>("revenue");
            set => SetAttributeValue("revenue", value);
        }

        /// <summary>
        /// Кредитный лимит
        /// </summary>
        /// <remarks>
        /// Введите кредитный лимит организации. Он будет полезен при решении связанных со счетами и бухгалтерским учетом вопросов по данному клиенту.
        /// </remarks>
        [AttributeLogicalName("creditlimit")]
        public Money CreditLimit
        {
            get => GetAttributeValue<Money>("creditlimit");
            set => SetAttributeValue("creditlimit", value);
        }

        /// <summary>
        /// Капитализация рынка
        /// </summary>
        /// <remarks>
        /// Введите рыночную капитализацию организации; используется в качестве индикатора при анализе финансовых результатов.
        /// </remarks>
        [AttributeLogicalName("marketcap")]
        public Money MarketCap
        {
            get => GetAttributeValue<Money>("marketcap");
            set => SetAttributeValue("marketcap", value);
        }

        /// <summary>
        /// Срок оплаты 90
        /// </summary>
        /// <remarks>
        /// Только для системного использования.
        /// </remarks>
        [AttributeLogicalName("aging90")]
        public Money Aging90 => GetAttributeValue<Money>("aging90");

        /// <summary>
        /// Срок оплаты 60
        /// </summary>
        /// <remarks>
        /// Только для системного использования.
        /// </remarks>
        [AttributeLogicalName("aging60")]
        public Money Aging60 => GetAttributeValue<Money>("aging60");

        /// <summary>
        /// Срок оплаты 30
        /// </summary>
        /// <remarks>
        /// Только для системного использования.
        /// </remarks>
        [AttributeLogicalName("aging30")]
        public Money Aging30 => GetAttributeValue<Money>("aging30");

        /// <summary>
        /// Открытый доход
        /// </summary>
        /// <remarks>
        /// Сумма открытых доходов по организации и ее дочерним организациям.
        /// </remarks>
        [AttributeLogicalName("openrevenue")]
        public Money OpenRevenue => GetAttributeValue<Money>("openrevenue");

        /// <summary>
        /// Валютный курс
        /// </summary>
        /// <remarks>
        /// Показывает обменный курс валюты записи. Этот валютный курс используется для преобразования всех денежных полей в записи из локальной валюты в валюту системы по умолчанию.
        /// </remarks>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate => GetAttributeValue<decimal?>("exchangerate");

        /// <summary>
        /// Адрес 2: часовой пояс
        /// </summary>
        /// <remarks>
        /// Выберите часовой пояс (или отклонение от UTC) для этого адреса, чтобы другие пользователи могли учитывать его, связываясь с кем-нибудь по этому адресу.
        /// </remarks>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset
        {
            get => GetAttributeValue<int?>("address2_utcoffset");
            set => SetAttributeValue("address2_utcoffset", value);
        }

        /// <summary>
        /// Номер версии правила часового пояса
        /// </summary>
        /// <remarks>
        /// Только для внутреннего использования.
        /// </remarks>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber
        {
            get => GetAttributeValue<int?>("timezoneruleversionnumber");
            set => SetAttributeValue("timezoneruleversionnumber", value);
        }

        /// <summary>
        /// Порядковый номер импорта
        /// </summary>
        /// <remarks>
        /// Уникальный идентификатор импорта или переноса данных, создавшего эту запись.
        /// </remarks>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber
        {
            get => GetAttributeValue<int?>("importsequencenumber");
            set => SetAttributeValue("importsequencenumber", value);
        }

        /// <summary>
        /// Адрес 1: часовой пояс
        /// </summary>
        /// <remarks>
        /// Выберите часовой пояс (или отклонение от UTC) для этого адреса, чтобы другие пользователи могли учитывать его, связываясь с кем-нибудь по этому адресу.
        /// </remarks>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset
        {
            get => GetAttributeValue<int?>("address1_utcoffset");
            set => SetAttributeValue("address1_utcoffset", value);
        }

        /// <summary>
        /// Число сотрудников
        /// </summary>
        /// <remarks>
        /// Введите число сотрудников, работающих в организации, для использования при маркетинговом сегментировании и демографическом анализе.
        /// </remarks>
        [AttributeLogicalName("numberofemployees")]
        public int? NumberOfEmployees
        {
            get => GetAttributeValue<int?>("numberofemployees");
            set => SetAttributeValue("numberofemployees", value);
        }

        /// <summary>
        /// Код часового пояса (преобразование в UTC)
        /// </summary>
        /// <remarks>
        /// Код часового пояса, использовавшийся при создании записи.
        /// </remarks>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode
        {
            get => GetAttributeValue<int?>("utcconversiontimezonecode");
            set => SetAttributeValue("utcconversiontimezonecode", value);
        }

        /// <summary>
        /// Общая сумма долей
        /// </summary>
        /// <remarks>
        /// Введите число акций организации в публичном обращении. Это число используется в качестве индикатора при анализе финансовых результатов.
        /// </remarks>
        [AttributeLogicalName("sharesoutstanding")]
        public int? SharesOutstanding
        {
            get => GetAttributeValue<int?>("sharesoutstanding");
            set => SetAttributeValue("sharesoutstanding", value);
        }

        /// <summary>
        /// Открытый доход(Состояние)
        /// </summary>
        /// <remarks>
        /// Состояние открытого дохода.
        /// </remarks>
        [AttributeLogicalName("openrevenue_state")]
        public int? OpenRevenue_State => GetAttributeValue<int?>("openrevenue_state");

        /// <summary>
        /// Открытые сделки(Состояние)
        /// </summary>
        /// <remarks>
        /// Состояние открытых сделок.
        /// </remarks>
        [AttributeLogicalName("opendeals_state")]
        public int? OpenDeals_State => GetAttributeValue<int?>("opendeals_state");

        /// <summary>
        /// Открытые сделки
        /// </summary>
        /// <remarks>
        /// Число открытых возможных сделок по организации и ее дочерним организациям.
        /// </remarks>
        [AttributeLogicalName("opendeals")]
        public int? OpenDeals => GetAttributeValue<int?>("opendeals");

        /// <summary>
        /// Дата создания записи
        /// </summary>
        /// <remarks>
        /// Дата и время переноса записи.
        /// </remarks>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn
        {
            get => GetAttributeValue<DateTime?>("overriddencreatedon");
            set => SetAttributeValue("overriddencreatedon", value);
        }

        /// <summary>
        /// Последняя дата, включенная в кампанию
        /// </summary>
        /// <remarks>
        /// Показывает дату последнего включения организации в маркетинговую кампанию или быструю кампанию.
        /// </remarks>
        [AttributeLogicalName("lastusedincampaign")]
        public DateTime? LastUsedInCampaign
        {
            get => GetAttributeValue<DateTime?>("lastusedincampaign");
            set => SetAttributeValue("lastusedincampaign", value);
        }

        /// <summary>
        /// Открытые сделки(Время последнего обновления)
        /// </summary>
        /// <remarks>
        /// Дата и время открытых сделок.
        /// </remarks>
        [AttributeLogicalName("opendeals_date")]
        public DateTime? OpenDeals_Date => GetAttributeValue<DateTime?>("opendeals_date");

        /// <summary>
        /// Дата изменения
        /// </summary>
        /// <remarks>
        /// Показывает дату и время последнего обновления записи. Дата и время отображаются для часового пояса, выбранного в параметрах Microsoft Dynamics CRM.
        /// </remarks>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn => GetAttributeValue<DateTime?>("modifiedon");

        /// <summary>
        /// Открытый доход(Время последнего обновления)
        /// </summary>
        /// <remarks>
        /// Дата и время открытого дохода.
        /// </remarks>
        [AttributeLogicalName("openrevenue_date")]
        public DateTime? OpenRevenue_Date => GetAttributeValue<DateTime?>("openrevenue_date");

        /// <summary>
        /// Дата создания
        /// </summary>
        /// <remarks>
        /// Показывает дату и время создания записи. Дата и время отображаются для часового пояса, выбранного в параметрах Microsoft Dynamics CRM.
        /// </remarks>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn => GetAttributeValue<DateTime?>("createdon");

        /// <summary>
        /// Адрес 2: широта
        /// </summary>
        /// <remarks>
        /// Введите значение широты для дополнительного адреса. Оно будет использоваться в приложениях карт и других приложениях.
        /// </remarks>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude
        {
            get => GetAttributeValue<double?>("address2_latitude");
            set => SetAttributeValue("address2_latitude", value);
        }

        /// <summary>
        /// Адрес 1: широта
        /// </summary>
        /// <remarks>
        /// Введите значение широты для основного адреса. Оно будет использоваться в приложениях карт и других приложениях.
        /// </remarks>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude
        {
            get => GetAttributeValue<double?>("address1_latitude");
            set => SetAttributeValue("address1_latitude", value);
        }

        /// <summary>
        /// Адрес 2: долгота
        /// </summary>
        /// <remarks>
        /// Введите значение долготы для дополнительного адреса. Оно будет использоваться в приложениях карт и других приложениях.
        /// </remarks>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude
        {
            get => GetAttributeValue<double?>("address2_longitude");
            set => SetAttributeValue("address2_longitude", value);
        }

        /// <summary>
        /// Адрес 1: долгота
        /// </summary>
        /// <remarks>
        /// Введите значение долготы для основного адреса. Оно будет использоваться в приложениях карт и других приложениях.
        /// </remarks>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude
        {
            get => GetAttributeValue<double?>("address1_longitude");
            set => SetAttributeValue("address1_longitude", value);
        }

        /// <summary>
        /// Запретить почту
        /// </summary>
        /// <remarks>
        /// Укажите, разрешена ли для организации прямая рассылка. Если выбран вариант 'Запретить', организация исключается из действий по рассылке писем при маркетинговых кампаниях.
        /// </remarks>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail
        {
            get => GetAttributeValue<bool?>("donotpostalmail");
            set => SetAttributeValue("donotpostalmail", value);
        }

        /// <summary>
        /// Запретить факсы
        /// </summary>
        /// <remarks>
        /// Укажите, разрешена ли для организации отправка факсов. Если выбран вариант 'Запретить', организация исключается из действий по рассылке факсов при маркетинговых кампаниях.
        /// </remarks>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax
        {
            get => GetAttributeValue<bool?>("donotfax");
            set => SetAttributeValue("donotfax", value);
        }

        /// <summary>
        /// Отправка маркетинговых материалов
        /// </summary>
        /// <remarks>
        /// Укажите, принимает ли организация маркетинговые материалы, такие как брошюры или каталоги.
        /// </remarks>
        [AttributeLogicalName("donotsendmm")]
        public bool? DoNotSendMM
        {
            get => GetAttributeValue<bool?>("donotsendmm");
            set => SetAttributeValue("donotsendmm", value);
        }

        /// <summary>
        /// Запретить рассылку
        /// </summary>
        /// <remarks>
        /// Укажите, разрешена ли для организации групповая рассылка обычной почты при маркетинговых кампаниях или быстрых кампаниях. Если выбран вариант 'Запретить', организацию можно добавлять в маркетинговые списки, но она исключается из рассылок обычной почты.
        /// </remarks>
        [AttributeLogicalName("donotbulkpostalmail")]
        public bool? DoNotBulkPostalMail
        {
            get => GetAttributeValue<bool?>("donotbulkpostalmail");
            set => SetAttributeValue("donotbulkpostalmail", value);
        }

        /// <summary>
        /// Запретить звонки
        /// </summary>
        /// <remarks>
        /// Укажите, разрешены ли для организации телефонные звонки. Если выбран вариант 'Запретить', организация исключается из действий с телефонными звонками при маркетинговых кампаниях.
        /// </remarks>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone
        {
            get => GetAttributeValue<bool?>("donotphone");
            set => SetAttributeValue("donotphone", value);
        }

        /// <summary>
        /// Запретить электронную почту
        /// </summary>
        /// <remarks>
        /// Укажите, разрешена ли для организации рассылка электронной почты из Microsoft Dynamics CRM.
        /// </remarks>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEMail
        {
            get => GetAttributeValue<bool?>("donotemail");
            set => SetAttributeValue("donotemail", value);
        }

        /// <summary>
        /// Участвует в бизнес-процессах
        /// </summary>
        /// <remarks>
        /// Только для системного использования. Данные бизнес-процесса предыдущей версии Microsoft Dynamics CRM 3.0.
        /// </remarks>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow
        {
            get => GetAttributeValue<bool?>("participatesinworkflow");
            set => SetAttributeValue("participatesinworkflow", value);
        }

        /// <summary>
        /// Возможность кредита
        /// </summary>
        /// <remarks>
        /// Укажите, приостановлен ли кредит для организации. Это полезная информация при решении связанных со счетами и бухгалтерским учетом вопросов по данному клиенту.
        /// </remarks>
        [AttributeLogicalName("creditonhold")]
        public bool? CreditOnHold
        {
            get => GetAttributeValue<bool?>("creditonhold");
            set => SetAttributeValue("creditonhold", value);
        }

        /// <summary>
        /// Запретить рассылку по электронной почте
        /// </summary>
        /// <remarks>
        /// Укажите, разрешена ли для организации массовая рассылка электронной почты при кампаниях. Если выбран вариант 'Запретить', организацию можно добавлять в маркетинговые списки, но она исключается из рассылок электронной почты.
        /// </remarks>
        [AttributeLogicalName("donotbulkemail")]
        public bool? DoNotBulkEMail
        {
            get => GetAttributeValue<bool?>("donotbulkemail");
            set => SetAttributeValue("donotbulkemail", value);
        }

        /// <summary>
        /// Документ слияния
        /// </summary>
        /// <remarks>
        /// Показывает, было ли выполнено слияние этой организации с другой.
        /// </remarks>
        [AttributeLogicalName("merged")]
        public bool? Merged => GetAttributeValue<bool?>("merged");

        [AttributeLogicalName("isprivate")]
        public bool? IsPrivate => GetAttributeValue<bool?>("isprivate");
    }
}
